name: Run CI/CD

permissions:
  contents: write

on:
  push:
    branches: [main, ci-cd]
  pull_request:
    branches: [main, ci-cd]
  workflow_dispatch:
    inputs:
      deploy:
        description: "Deply to production"
        required: false
        type: boolean
        default: true

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    services:
      test_discogs_db:
        image: postgres:13
        env:
          POSTGRES_DB: test_discogs_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      test_users_db:
        image: postgres:13
        env:
          POSTGRES_DB: test_users_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5434:5432
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install -r server/requirements.txt
      - name: Initialize test databases
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          psql -h localhost -U postgres -p 5433 -d test_discogs_db -f server/test/init_discogs.sql
          psql -h localhost -U postgres -p 5434 -d test_users_db -f server/test/init_users.sql
        env:
          PGPASSWORD: postgres
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5433; do sleep 1; done
          until pg_isready -h localhost -p 5434; do sleep 1; done
      - name: Run tests and generate coverage report
        run: |
          cd server
          python3 -m coverage run -m unittest discover test -b
          python3 -m coverage report

  build-test-image:
    name: Build Test Docker Image
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Create output directory for Docker images
        run: mkdir -p docker-images
      - name: Build test Docker image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag discogs-app-backend-test:latest \
            --output type=oci,dest=docker-images/backend-test-image.tar \
            server/
      - name: Upload test Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-docker-image
          path: docker-images/backend-test-image.tar
      - name: Create test deployment package
        run: |
          mkdir -p test-deployment test-deployment/test
          cp -R docker-images/backend-test-image.tar test-deployment/
          cp server/test/init_users.sql test-deployment/test/init_users.sql
          cp server/test/init_discogs.sql test-deployment/test/init_discogs.sql
          
          # Create a test docker-compose.yml
          cat > test-deployment/docker-compose.yml << EOL
          version: '3.8'
          services:
            discogs_db:
              image: postgres:13
              environment:
                POSTGRES_DB: test_discogs_db
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: postgres
              volumes:
                - ./test/init_discogs.sql:/docker-entrypoint-initdb.d/init.sql
              ports:
                - "5433:5432"
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres"]
                interval: 5s
                timeout: 5s
                retries: 5

            users_db:
              image: postgres:13
              environment:
                POSTGRES_DB: test_users_db
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: postgres
              volumes:
                - ./test/init_users.sql:/docker-entrypoint-initdb.d/init.sql
              ports:
                - "5434:5432"
              healthcheck:
                test: ["CMD", "pg_isready", "-U", "postgres"]
                interval: 5s
                timeout: 5s
                retries: 5

            flask_app:
              build: .
              ports:
                - "5001:5001"
              depends_on:
                discogs_db:
                  condition: service_healthy
                users_db:
                  condition: service_healthy
          EOL
          
          # Create test deployment instructions
          cat > test-deployment/README.md << EOL
          # Test Deployment Instructions
          
          ## Load the test Docker image:
          \`\`\`
          docker load < backend-test-image.tar
          \`\`\`
          
          ## Start the test environment:
          \`\`\`
          docker-compose up -d
          \`\`\`
          
          ## Access the application at:
          http://localhost:5001
          EOL
          
          zip -r test-deployment.zip test-deployment

      - name: Upload test deployment package
        uses: actions/upload-artifact@v4
        with:
          name: test-deployment-package
          path: test-deployment.zip

  deploy-test-release:
    name: Deploy Test Release
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/ci-cd') || github.event.inputs.deploy_test == 'true'
    needs: [build-test-image]
    runs-on: ubuntu-latest
    steps:
      - name: Download test deployment package
        uses: actions/download-artifact@v4
        with:
          name: test-deployment-package
          
      - name: Create GitHub Test Release
        uses: softprops/action-gh-release@v1
        with:
          files: test-deployment.zip
          name: Test Release ${{ github.run_number }} - ${{ github.sha }}
          tag_name: test-v0.1.${{ github.run_number }}
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}