name: Run CI/CD

permissions:
  contents: write

on:
  push:
    branches: [main, ci-cd]
  pull_request:
    branches: [main, ci-cd]
  workflow_dispatch:
    inputs:
      deploy:
        description: "Deply to production"
        required: false
        type: boolean
        default: true

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    services:
      test_discogs_db:
        image: postgres:13
        env:
          POSTGRES_DB: test_discogs_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      test_users_db:
        image: postgres:13
        env:
          POSTGRES_DB: test_users_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5434:5432
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install -r server/requirements.txt
      - name: Initialize test databases
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          psql -h localhost -U postgres -p 5433 -d test_discogs_db -f server/test/init_discogs.sql
          psql -h localhost -U postgres -p 5434 -d test_users_db -f server/test/init_users.sql
        env:
          PGPASSWORD: postgres
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5433; do sleep 1; done
          until pg_isready -h localhost -p 5434; do sleep 1; done
      - name: Run tests and generate coverage report
        run: |
          cd server
          python3 -m coverage run -m unittest discover test -b
          python3 -m coverage report

  build-backend:
    name: Build Backend
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and export multi-platform Docker image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag discogs-app-backend:latest \
            --output type=docker,dest=docker-images/backend-image.tar \
            ./server
        working-directory: .
      - name: Create directory for artifact if it doesn't exist
        run: mkdir -p docker-images
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-docker-image
          path: docker-images/backend-image.tar

  deploy:
    name: Deploy Application
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/ci-cd') || github.event.inputs.deploy == 'true'
    needs: [build-backend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
          
      - name: Download backend Docker image
        uses: actions/download-artifact@v4
        with:
          name: backend-docker-image
          path: dist/backend
      
      - name: Create release package
        run: |
          mkdir -p release
          cp -R dist/backend release/backend
          cp server/docker-compose.yml release/
          echo "Release created at: $(date)" > release/release_info.txt
          
          # Create a simplified docker-compose for deployment
          cat > release/docker-compose.yml << EOL
          version: '3.8'
          
          services:
            backend:
              image: discogs-app-backend:latest
              environment:
                - FLASK_ENV=production
                - FLASK_APP=app.py
                - DATABASE_URL_DISCOGS=postgresql://postgres:postgres@discogs_db:5432/discogs_db
                - DATABASE_URL_USERS=postgresql://postgres:postgres@users_db:5432/users_db
              ports:
                - "5001:5000"
              depends_on:
                - discogs_db
                - users_db
          
            discogs_db:
              image: postgres:13
              environment:
                - POSTGRES_DB=discogs_db
                - POSTGRES_USER=postgres
              ports:
                - "5432:5432"
              volumes:
                - discogs_data:/var/lib/postgresql/data
                - ./server/test/init_discogs.sql:/docker-entrypoint-initdb.d/init_discogs.sql
          
            users_db:
              image: postgres:13
              environment:
                - POSTGRES_DB=users_db
                - POSTGRES_USER=postgres
              ports:
                - "5435:5432"
              volumes:
                - users_data:/var/lib/postgresql/data
                - ./server/test/init_users.sql:/docker-entrypoint-initdb.d/init_users.sql
          
          volumes:
            discogs_data:
            users_data:
          EOL
          
          # Create a simple deployment README
          cat > release/README.md << EOL
          # Deployment Instructions
          
          ## Backend and Database Deployment
          
          1. Load the Docker image:
             \`\`\`
             docker load < backend/backend-image.tar
             \`\`\`
          
          2. Start the backend and database services:
             \`\`\`
             docker-compose up -d
             \`\`\`
          
          ## Configuration
          
          Modify the \`docker-compose.yml\` file to adjust environment variables and ports as needed.
          EOL
          
          zip -r release.zip release

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release.zip
          name: Release ${{ github.run_number }} - ${{ github.sha }}
          tag_name: v0.1.${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}